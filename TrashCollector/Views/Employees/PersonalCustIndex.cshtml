@model IEnumerable<TrashCollector.Models.Customer>

@{
    ViewBag.Title = "PersonalCustIndex";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>PersonalCustIndex</h2>


<table class="table">
    <tr>
        @*<th>
                @Html.DisplayNameFor(model => model.ApplicationId)
            </th>*@
        <th>
            @Html.DisplayNameFor(model => model.pickupDay)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.firstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.lastName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.extraPickupDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.streetAddress)
        </th>
        @*<th>
                @Html.DisplayNameFor(model => model.city)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.state)
            </th>*@
        <th>
            @Html.DisplayNameFor(model => model.zip)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.balance)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.suspendedStart)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.suspendedEnd)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.pickupConfirm)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            @*<td>
                    @Html.DisplayFor(modelItem => item.ApplicationId)
                </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.pickupDay)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.firstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.lastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.extraPickupDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.streetAddress)
            </td>
            @*<td>
                    @Html.DisplayFor(modelItem => item.city)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.state)
                </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.zip)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.balance)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.suspendedStart)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.suspendedEnd)
            </td>
            <td>
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        @Html.CheckBoxFor(modelItem => item.pickupConfirm)
                        @Html.HiddenFor(modelItem => item.pickupConfirm)
                        @Html.ValidationMessageFor(modelItem => item.pickupConfirm)
                    </div>
                    <button type="submit" class="btn btn-success submit">Submit</button>
                }
            </td>
        </tr>
    }

</table>
		<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.js"></script>
		<script src="//ajax.aspnetcdn.com/ajax/jquery.validate/1.13.1/jquery.validate.js"></script>
		<script src="//ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.js"></script>
		
		<script>
			// extend jquery range validator to work for required checkboxes
			var defaultRangeValidator = $.validator.methods.range;
			$.validator.methods.range = function(value, element, param) {
				if(element.type === 'checkbox') {
					// if it's a checkbox return true if it is checked
					return element.checked;
				} else {
					// otherwise run the default validation function
					return defaultRangeValidator.call(this, value, element, param);
				}
			}
		</script>
